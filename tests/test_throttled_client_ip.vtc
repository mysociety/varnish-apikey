varnishtest "Test throttled client IP"

server s1 {
  rxreq
  txresp -body "hello world"
} -start

varnish v1 -vcl {
  import std;
  import redis;

  sub vcl_init {
    new db = redis.db(
        location="${redis_master_address}",
        type=master,
        connection_timeout=500,
        shared_connections=false,
        max_connections=1);
  }

  include "${pwd}/vcl/varnish-apikey.vcl";

  backend default {
    .host = "${s1_addr}";
    .port = "${s1_port}";
  }

  sub recognize_apiname_apikey_token {
    # Identify api
    set req.http.apiname = "testthrottledbyipapi";
    # Save apikey
    set req.http.apikey = regsub(req.url, ".*[?;]apikey=([^;]*).*", "\1");
  }

  sub set_up {
    db.command("FLUSHDB");
    db.execute();

    db.command("SET");
    db.push("api:testthrottledbyipapi:throttled");
    db.push("1");
    db.execute();

    # Set up all the default throttling settings for the api
    db.command("SET");
    db.push("api:testthrottledbyipapi:counter:time");
    db.push("60");
    db.execute();

    db.command("SET");
    db.push("api:testthrottledbyipapi:blocked:time");
    db.push("60");
    db.execute();

    db.command("SET");
    db.push("api:testthrottledbyipapi:default_max");
    db.push("60");
    db.execute();

    # Set a maximum number of calls to test the throttling works
    db.command("SET");
    db.push("key:127.0.0.1:ratelimit:testthrottledbyipapi:max");
    db.push("1");
    db.execute();
  }

  sub vcl_recv {
    # Hacky way to run the setup only on the first request because we can't
    # call it from vcl_init
    if (req.http.X-Test-Setup == "true") {
      call set_up;
    }
    # Validate apikey using apikey library.
    call validate_api;
    set req.backend_hint = default;
  }
} -start

client c1 {
  # The first request should be accepted, and will set the counter for this
  # IP to 0, as well as mark the counter as needing to be reset in 60
  # seconds
  txreq -hdr "X-Test-Setup: true"
  rxresp

  expect resp.status == 200

  # The second request should also be accepted, as it will set the counter for
  # this IP to 1
  txreq
  rxresp

  expect resp.status == 200

  # The third request should fail, as it will set the counter for
  # this IP to 2, which is greater than the max we've set
  txreq
  rxresp

  expect resp.status == 403

} -run

varnish v1 -expect client_req == 3
